/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

plugins {
    id 'java'
    id 'idea'
    id 'com.google.protobuf' version '0.8.3'
    id 'maven'
    id 'maven-publish'
    id 'project-report'
    id 'net.researchgate.release' version '2.6.0'
}

repositories {
    mavenCentral()
}

ext {
    genDirectory = "$projectDir/gen"
    distDirectory = "$projectDir/distrobution"
    pythonBuildDirPath = "${file(buildDir.path + '/python/nexusproto').path}"
}

protobuf {

    generatedFilesBaseDir = genDirectory

    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.4.0'
    }

    plugins {
        // Define a plugin with name 'grpc'
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                python {
                    outputSubDir = 'python'
                }
            }
        }
    }

}

task writeNewPom {
    doLast {
        pom {}.writeTo(file(buildDir.path + "/poms/${project.name}-${project.version}.xml"))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

assemble.doLast {
    File pythonbuilddir = file(pythonBuildDirPath)

    File pythonsource = file('src/main/python')

    Files.walkFileTree(pythonsource.toPath(), new SimpleFileVisitor<Path>() {
        @Override
        public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {
            Files.createDirectories(pythonbuilddir.toPath().resolve(pythonsource.toPath().relativize(dir)))
            return FileVisitResult.CONTINUE
        }

        @Override
        public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
            Files.copy(file, pythonbuilddir.toPath().resolve(pythonsource.toPath().relativize(file)), StandardCopyOption.REPLACE_EXISTING)
            return FileVisitResult.CONTINUE
        }
    })

    def setupPy = file(pythonbuilddir.path + '/nexusproto/setup.py').text
    setupPy = setupPy.replaceAll(/GRADLE_PROJECT_VERSION/, "$project.version")
    file(pythonbuilddir.path + '/nexusproto/setup.py').write(setupPy)

    Files.move(file(pythonbuilddir.path + '/nexusproto/setup.py').toPath(), file(pythonbuilddir.path + '/setup.py').toPath(), StandardCopyOption.REPLACE_EXISTING)

    File generatedPython = file("$genDirectory/main/python/DataTile_pb2.py")

    Files.copy(generatedPython.toPath(), file(pythonbuilddir.path + '/nexusproto/DataTile_pb2.py').toPath(), StandardCopyOption.REPLACE_EXISTING)
}

updateVersion.doLast {
    File pythonbuilddir = file(pythonBuildDirPath)

    def setupPy = file(pythonbuilddir.path + '/nexusproto/setup.py').text
    setupPy = setupPy.replaceAll(/GRADLE_PROJECT_VERSION/, "$project.version")
    file(pythonbuilddir.path + '/nexusproto/setup.py').write(setupPy)

}

task tarPython(type: Tar, dependsOn: [assemble]) {
    destinationDir = file("distrobution")
    archiveName = 'nexusproto.tar.gz'
    compression = Compression.GZIP
    from(file(buildDir.path + '/python')) {
        include '**/*'
    }
}

clean.doLast {
    file(genDirectory).deleteDir()
    file(distDirectory).deleteDir()
}

dependencies {

    compile 'com.google.protobuf:protobuf-java:3.4.0'

}